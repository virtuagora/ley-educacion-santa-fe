<script src="{{ baseUrl() }}/assets/js/chart/chart.min.js"></script>
<script src="{{ baseUrl() }}/assets/js/underscore/underscore-min.js"></script>
<script>
	var data = [
		{
			value: '{{ chart.data1.val }}',
			color: '{{ chart.data1.color }}',
			highlight: '{{ chart.data1.highlight }}',
			label: '{{ chart.data1.tag }}'
		},
		{
			value: '{{ chart.data2.val }}',
			color: '{{ chart.data2.color }}',
			highlight: '{{ chart.data2.highlight }}',
			label: '{{ chart.data2.tag }}'
		},
		{
			value: '{{ chart.data3.val }}',
			color: '{{ chart.data3.color }}',
			highlight: '{{ chart.data3.highlight }}',
			label: '{{ chart.data3.tag }}'
		}
	]
	var ctx = null;
	var myChart = null;
	function mostrarChart(){
		ctx = $("#{{ chart.id }}").get(0).getContext("2d");
		myChart = new Chart(ctx).Pie(data,{
			scaleFontFamily: "'Open Sans', 'Arial', sans-serif",
			tooltipFontFamily: "'Open Sans', 'Arial', sans-serif",
			segmentShowStroke : true, // Mostrar linea limitadora
			segmentStrokeColor : "#fff", // Color linea limitadora
			segmentStrokeWidth : 2, // Linea limitadora
			percentageInnerCutout : 0, // This is 0 for Pie charts
			animationSteps : 100,
			animationEasing : "easeOutBounce",
			animateRotate : true,
			animateScale : false,
		});
		{% if chart.data1.val > 0 %}
        var total = {{chart.data1.val }} + {{chart.data2.val }} + {{chart.data3.val }};
        console.log(total);
		var porc = [({{chart.data1.val }}/total)*100,({{ chart.data2.val }}/total)*100,({{ chart.data3.val }}/total)*100];
            //func([{{ chart.data1.val ? chart.data1.val : '' }}{{ chart.data2.val ? ',' ~ chart.data2.val : '' }}{{ chart.data3.val ? ',' ~ chart.data3.val : '' }}],100);
		/*('#data1-p').html((porc[0]).toFixed(2)+'%');
		$('#data2-p').html((porc[1]).toFixed(2)+'%');
		$('#data3-p').html((porc[2]).toFixed(2)+'%');
        */
		 {% else %}
		 /*var porc = [({{ chart.data2.val }}/total)*100,({{ chart.data3.val }}/total)*100]
		  $('#data2-p').html(porc[0]+'%');
		$('#data3-p').html(porc[1]+'%');*/
		  {% endif %}
	}
/*
          function func(l, target) {
    var off = target - _.reduce(l, function(acc, x) { return acc + Math.round(x) }, 0);
    return _.chain(l).
            sortBy(function(x) { return Math.round(x) - x }).
            map(function(x, i) { return Math.round(x) + (off > i) - (i >= (l.length + off)) }).
            value();
}
*/

	// Round to 100%
	// http://stackoverflow.com/questions/13483430/how-to-make-rounded-percentages-add-up-to-100
	/*
    function func( orig, target ) {
		var i = orig.length, j = 0, total = 0, change, newVals = [], next, factor1, factor2, len = orig.length, marginOfErrors = [];
		// map original values to new array
		while( i-- ) {total += newVals[i] = Math.round( orig[i] );}
		change = total < target ? 1 : -1;
		while( total !== target ) {
			// select number that will be less affected by change determined
			// in terms of itself e.g. Incrementing 10 by 1 would mean
			// an error of 10% in relation to itself.
			for( i = 0; i < len; i++ ) {
				next = i === len - 1 ? 0 : i + 1;
				factor2 = errorFactor( orig[next], newVals[next] + change );
				factor1 = errorFactor( orig[i], newVals[i] + change );
				if(  factor1 > factor2 ) {
					j = next;
				}
			}
			newVals[j] += change;
			total += change;
		}
		for( i = 0; i < len; i++ ) { marginOfErrors[i] = newVals[i] && Math.abs( orig[i] - newVals[i] ) / orig[i]; }
		for( i = 0; i < len; i++ ) {
			for( j = 0; j < len; j++ ) {
				if( j === i ) continue;
				var roundUpFactor = errorFactor( orig[i], newVals[i] + 1)  + errorFactor( orig[j], newVals[j] - 1 );
				var roundDownFactor = errorFactor( orig[i], newVals[i] - 1) + errorFactor( orig[j], newVals[j] + 1 );
				var sumMargin = marginOfErrors[i] + marginOfErrors[j];
				if( roundUpFactor < sumMargin) {
					newVals[i] = newVals[i] + 1;
					newVals[j] = newVals[j] - 1;
					marginOfErrors[i] = newVals[i] && Math.abs( orig[i] - newVals[i] ) / orig[i];
					marginOfErrors[j] = newVals[j] && Math.abs( orig[j] - newVals[j] ) / orig[j];
				}
				if( roundDownFactor < sumMargin ) {
					newVals[i] = newVals[i] - 1;
					newVals[j] = newVals[j] + 1;
					marginOfErrors[i] = newVals[i] && Math.abs( orig[i] - newVals[i] ) / orig[i];
					marginOfErrors[j] = newVals[j] && Math.abs( orig[j] - newVals[j] ) / orig[j];
				}

			}
		}
		function errorFactor( oldNum, newNum ) {
			return Math.abs( oldNum - newNum ) / oldNum;
		}
		console.log( newVals );
		return newVals;
	}
    */
</script>
